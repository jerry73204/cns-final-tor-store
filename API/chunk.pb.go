// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chunk.proto

package main

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Chunk struct {
	// Idx refers to the chunk index within this storage object.
	// Since a bidirectional stream is used for each uploading or downloading operation,
	// all chunks appearing in a stream belong to the same storage object,
	// and that's why we only need to distinguish a chunk's index within a storage object,
	// but not a global index among all storage objects.
	Idx int32 `protobuf:"varint,1,opt,name=Idx,proto3" json:"Idx,omitempty"`
	// Data may comtain value (public key of hidden service) or key (hash of public key)
	Data                 []byte   `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Chunk) Reset()         { *m = Chunk{} }
func (m *Chunk) String() string { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()    {}
func (*Chunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_67c46bd41e8571bd, []int{0}
}

func (m *Chunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Chunk.Unmarshal(m, b)
}
func (m *Chunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Chunk.Marshal(b, m, deterministic)
}
func (m *Chunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chunk.Merge(m, src)
}
func (m *Chunk) XXX_Size() int {
	return xxx_messageInfo_Chunk.Size(m)
}
func (m *Chunk) XXX_DiscardUnknown() {
	xxx_messageInfo_Chunk.DiscardUnknown(m)
}

var xxx_messageInfo_Chunk proto.InternalMessageInfo

func (m *Chunk) GetIdx() int32 {
	if m != nil {
		return m.Idx
	}
	return 0
}

func (m *Chunk) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Chunk)(nil), "chunk.Chunk")
}

func init() { proto.RegisterFile("chunk.proto", fileDescriptor_67c46bd41e8571bd) }

var fileDescriptor_67c46bd41e8571bd = []byte{
	// 220 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0xce, 0x28, 0xcd,
	0xcb, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0xa4, 0xa4, 0xd3, 0xf3, 0xf3,
	0xd3, 0x73, 0x52, 0xf5, 0xc1, 0x82, 0x49, 0xa5, 0x69, 0xfa, 0xa9, 0xb9, 0x05, 0x25, 0x95, 0x10,
	0x35, 0x52, 0x72, 0xe8, 0x92, 0xe5, 0x45, 0x89, 0x05, 0x05, 0xa9, 0x45, 0xc5, 0x10, 0x79, 0x25,
	0x5d, 0x2e, 0x56, 0x67, 0x90, 0x29, 0x42, 0x02, 0x5c, 0xcc, 0x9e, 0x29, 0x15, 0x12, 0x8c, 0x0a,
	0x8c, 0x1a, 0xac, 0x41, 0x20, 0xa6, 0x90, 0x10, 0x17, 0x8b, 0x4b, 0x62, 0x49, 0xa2, 0x04, 0x93,
	0x02, 0xa3, 0x06, 0x4f, 0x10, 0x98, 0x6d, 0xb4, 0x8a, 0x91, 0x8b, 0x3d, 0xb8, 0x24, 0xbf, 0x28,
	0x31, 0x3d, 0x55, 0xc8, 0x95, 0x8b, 0xc7, 0x3d, 0xb5, 0x04, 0xac, 0x3b, 0x38, 0xb3, 0x2a, 0x55,
	0x48, 0x4c, 0x0f, 0x62, 0x97, 0x1e, 0xcc, 0x2e, 0x3d, 0x57, 0x90, 0x43, 0xa4, 0xa4, 0x31, 0xc4,
	0x3d, 0xf3, 0x4a, 0x8c, 0x8d, 0xc2, 0x12, 0x73, 0x4a, 0x53, 0x95, 0x18, 0x84, 0xb4, 0xb8, 0xd8,
	0x42, 0x0b, 0x72, 0xf2, 0x13, 0x53, 0x84, 0x78, 0xf4, 0x20, 0xbe, 0x03, 0x1b, 0x29, 0x85, 0xc2,
	0x53, 0x62, 0xd0, 0x60, 0x34, 0x60, 0x14, 0xd2, 0xe1, 0xe2, 0x70, 0xc9, 0x2f, 0xcf, 0x23, 0x4e,
	0xb5, 0x13, 0x5b, 0x14, 0x4b, 0x6e, 0x62, 0x66, 0x5e, 0x12, 0x1b, 0xd8, 0x62, 0x63, 0x40, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x84, 0x2e, 0xfc, 0xac, 0x3d, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StorageClient is the client API for Storage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StorageClient interface {
	// Avoid hard-coding chunk size
	// because implementation changes in storage server may affect this value
	GetChunkSize(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*wrappers.Int32Value, error)
	Upload(ctx context.Context, opts ...grpc.CallOption) (Storage_UploadClient, error)
	Download(ctx context.Context, opts ...grpc.CallOption) (Storage_DownloadClient, error)
}

type storageClient struct {
	cc *grpc.ClientConn
}

func NewStorageClient(cc *grpc.ClientConn) StorageClient {
	return &storageClient{cc}
}

func (c *storageClient) GetChunkSize(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*wrappers.Int32Value, error) {
	out := new(wrappers.Int32Value)
	err := c.cc.Invoke(ctx, "/chunk.Storage/GetChunkSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) Upload(ctx context.Context, opts ...grpc.CallOption) (Storage_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Storage_serviceDesc.Streams[0], "/chunk.Storage/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageUploadClient{stream}
	return x, nil
}

type Storage_UploadClient interface {
	Send(*Chunk) error
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type storageUploadClient struct {
	grpc.ClientStream
}

func (x *storageUploadClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *storageUploadClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageClient) Download(ctx context.Context, opts ...grpc.CallOption) (Storage_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Storage_serviceDesc.Streams[1], "/chunk.Storage/Download", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageDownloadClient{stream}
	return x, nil
}

type Storage_DownloadClient interface {
	Send(*Chunk) error
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type storageDownloadClient struct {
	grpc.ClientStream
}

func (x *storageDownloadClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *storageDownloadClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StorageServer is the server API for Storage service.
type StorageServer interface {
	// Avoid hard-coding chunk size
	// because implementation changes in storage server may affect this value
	GetChunkSize(context.Context, *empty.Empty) (*wrappers.Int32Value, error)
	Upload(Storage_UploadServer) error
	Download(Storage_DownloadServer) error
}

func RegisterStorageServer(s *grpc.Server, srv StorageServer) {
	s.RegisterService(&_Storage_serviceDesc, srv)
}

func _Storage_GetChunkSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetChunkSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chunk.Storage/GetChunkSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetChunkSize(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StorageServer).Upload(&storageUploadServer{stream})
}

type Storage_UploadServer interface {
	Send(*Chunk) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type storageUploadServer struct {
	grpc.ServerStream
}

func (x *storageUploadServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func (x *storageUploadServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Storage_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StorageServer).Download(&storageDownloadServer{stream})
}

type Storage_DownloadServer interface {
	Send(*Chunk) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type storageDownloadServer struct {
	grpc.ServerStream
}

func (x *storageDownloadServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func (x *storageDownloadServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Storage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chunk.Storage",
	HandlerType: (*StorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChunkSize",
			Handler:    _Storage_GetChunkSize_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _Storage_Upload_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Download",
			Handler:       _Storage_Download_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chunk.proto",
}
